diff --git a/magnetic/main.py b/magnetic/main.py
index 37a1ce9..37150ea 100644
--- a/magnetic/main.py
+++ b/magnetic/main.py
@@ -164,7 +164,7 @@ class MainWindow(QMainWindow):
     def create_statusbar(self):
         # Statusbar
         self.status = self.statusBar()
-        self.counter = QLabel("Rx:")
+        self.counter = QLabel("Rx: -")
         self.statusBar().addPermanentWidget(self.counter)
 
     def create_menu(self):
@@ -173,6 +173,10 @@ class MainWindow(QMainWindow):
             self.portbox.clear()
             self.portbox.addItems(available)
 
+        def _action_quit():
+            QtCore.QCoreApplication.exit(0)
+
+
         menu = self.menuBar()
 
         file_menu = QMenu("&File", self)
@@ -183,7 +187,7 @@ class MainWindow(QMainWindow):
         file_menu.addAction("Export to...", lambda: print("Export to..."))
         file_menu.addAction("Import from...", lambda: print("Import from..."))
         file_menu.addSeparator()
-        file_menu.addAction("Exit", lambda: print("Exit"))
+        file_menu.addAction("Exit", _action_quit)
         menu.addMenu(file_menu)
 
     def create_toolbar(self):
@@ -192,7 +196,7 @@ class MainWindow(QMainWindow):
 
         self.buttons = {}
 
-        # Start, stop, pause button
+        # Start/Stop buttons
         self.modeButtonGroup = QButtonGroup()
         for key, icon, tooltip in (
             ('start', 'assets/start-icon.png', 'connect and run'),
@@ -212,29 +216,29 @@ class MainWindow(QMainWindow):
             self.buttons[key] = btn
         toolbar.addSeparator()
 
-        # Portbox
+        # Port box
         toolbar.addWidget(QLabel("Port:", self))
         self.portbox = QComboBox(self)
         toolbar.addWidget(self.portbox)
         
-        # Button rescan
+        # Button find serial ports
         btn = QToolButton()
         btn.setIcon(QIcon("assets/update-icon.png"))
         toolbar.addWidget(btn)
         self.buttons['rescan'] = btn
         toolbar.addSeparator()
 
-        # Range
+        # Select number of samples
         self.spin = QSpinBox()
         self.spin.setValue(100)
-        self.spin.setRange(100, 600)
+        self.spin.setRange(100, 1000)
         self.spin.setSingleStep(100)
-        self.spin.setSuffix(" ms")
+        self.spin.setSuffix(" samples")
         self.spin.lineEdit().setReadOnly(True)
         toolbar.addWidget(self.spin)
-
         toolbar.addSeparator()
-        # View Mode
+
+        # Chart/Table view mode
         self.viewButtonGroup = QButtonGroup()
         for key, icon, tooltip in (
             ("chart", "assets/charts.png", "Chart View"),
@@ -251,9 +255,9 @@ class MainWindow(QMainWindow):
             self.viewButtonGroup.addButton(btn)
             toolbar.addWidget(btn)
             self.buttons[key] = btn
-        
         toolbar.addSeparator()
 
+        # Records
         btn = QToolButton()
         btn.setIcon(QIcon('assets/log-icon'))
         btn.setToolTip("Logging on/off")
@@ -261,6 +265,14 @@ class MainWindow(QMainWindow):
         toolbar.addWidget(btn)
         self.buttons['log'] = btn
 
+        self.lineedit = QLineEdit()
+        self.lineedit.setReadOnly(True)
+        self.lineedit.setDisabled(True)
+        toolbar.addWidget(self.lineedit)
+
+        self.buttons['logpath'] = btn = QPushButton("...")
+        btn.setDisabled(True)
+        toolbar.addWidget(btn)
         
     def centre(self):
         """ This method aligned main window related center screen """
@@ -288,52 +300,58 @@ class Magnetic(MainWindow):
         self.portbox.addItems(available_ports)
         self.available = True
 
+        # If didn't find serial ports, then disabled start buttons
         if not available_ports:
             self.status.showMessage("No available ports")
             self.buttons['connect'].setDisabled(True)
-            # for btn in self.modeButtonGroup.buttons():
-            #     btn.setDisabled(True)
+            for btn in self.modeButtonGroup.buttons():
+                 btn.setDisabled(True)
 
         # Set model
         self.model = SensorDataModel()
         self.centralWidget().table_view.setModel(self.model)
-        self.centralWidget().chart_view.setModel(self.model)
 
-        # Connect Signal/Slot
+        # Connecting signal/slot
+
+        # ...buttons
         self.buttons["connect"].clicked.connect(self.on_connect)
         self.buttons["clear"].clicked.connect(self.on_clear)
         self.buttons["quit"].clicked.connect(self.on_quit)
 
+        # ...button group
         self.modeButtonGroup.buttonClicked[QAbstractButton].connect(self.on_run)
+        self.viewButtonGroup.buttonClicked[QAbstractButton].connect(self.on_switch_view)
 
+        # ...comboboxs
         self.portbox.currentTextChanged[str].connect(self.on_switch_port)
-        self.viewButtonGroup.buttonClicked[QAbstractButton].connect(self.on_switch_view)
         self.spin.valueChanged[int].connect(self.on_change_interval)
 
-        self.model.rowsInserted.connect(self.centralWidget().chart_view.redraw)
+        # ...models
+        #self.model.rowsInserted.connect(self.centralWidget().chart_view.redraw)
 
     def timerEvent(self, QTimerEvent):
         """ Handler timer event"""
-        # time = QtCore.QTime().currentTime().toString()
+        time = QtCore.QTime().currentTime().toString()
+
+        # <1> Get data from sensor
         try:
             data = [round(item, 1) for item in sensor.SENSOR_QUEUE.get(timeout=0.2)]
         except queue.Empty:
             self.status.showMessage("No sensor data")
             return
-
         r, p, h, hy_raw, hx_raw, hz_raw, hy, hx, hz = data
 
-        # <1> Apply Dub algorithm
+        # <2> Apply correction algorithms
         if self.options['dub horizont'].checkState():
             hy_raw, hx_raw, hz_raw = to_horizont(hy_raw, hx_raw, hz_raw, r, p)
 
-        # <2> Insert row values to model
+        # <3> Append data to model
         self.model.append_data((r, p, h, hy_raw, hx_raw, hz_raw, hy, hx, hz))
 
-        # <3> Set values to data view
+        # <4> Show to data view
         self.show_data(r, p, h, hy_raw, hx_raw, hz_raw, hy, hx, hz)
 
-        # <4> Update matplotlib plot
+        # <5> Update plot
         self.centralWidget().inclinometer_chart.update_plot(r,p)
         self.centralWidget().heading_chart.update_plot(h)
 
